253:    const fetchTopVolumePerps = async () => {
254-      try {
255-        const res = await fetch("https://api.hyperliquid.xyz/info", {
256-          method: "POST",
257-          headers: { "Content-Type": "application/json" },
258-          body: JSON.stringify({ type: "metaAndAssetCtxs" }),
259-        })
260-        if (!res.ok) {
261-          return
262-        }
263-
264-        const json = await res.json()
265-
266-        const universe = json?.[0]?.universe ?? []
267-        const ctxs = json?.[1] ?? []
268-
269-        const rows: TokenInfo[] = universe.map((u: any, i: number) => {
270-          const c = ctxs[i] || {}
271-          const mark = Number.parseFloat(c.markPx ?? "0")
272-          const prev = Number.parseFloat(c.prevDayPx ?? (mark || "0"))
273-          const vol = Number.parseFloat(c.dayNtlVlm ?? "0")
274-          const changePct = prev > 0 ? ((mark - prev) / prev) * 100 : 0
275-
276-          return {
277-            name: u.name,
278-            price: mark.toFixed(5),
279-            change24h: Number(changePct.toFixed(2)),
280-            // @ts-ignore
281-            volume24h: vol,
282-          }
283-        })
--
290:        console.error("fetchTopVolumePerps error:", e)
291-      }
292-    }
293-
294:    fetchTopVolumePerps()
295-  }, [])
296-
297-  useEffect(() => {
298-    const fetchDefiLlamaRevenue = async () => {
299-      setRevenueLoading(true)
300-      try {
301-        const response = await fetch("/api/defillama-revenue")
302-        if (response.ok) {
303-          const data = await response.json()
304-          setDefiLlamaRevenue({
305-            totalDataChart: data.totalDataChart || [],
306-          })
307-        } else {
308-          console.error("DefiLlama API returned error:", response.status)
309-        }
310-      } catch (error) {
311-        console.error("Error fetching DefiLlama revenue:", error)
312-      } finally {
313-        setRevenueLoading(false)
314-      }
315-    }
316-
317-    fetchDefiLlamaRevenue()
318-  }, [])
319-
320-  useEffect(() => {
321-    const fetchRevenueData = async () => {
322-      setIsLoading(true)
323-      try {
324-        const response = await fetch(`/api/revenue?timeView=${timePeriod}`)
